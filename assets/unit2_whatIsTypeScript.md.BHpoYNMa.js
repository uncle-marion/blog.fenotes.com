import{_ as s,c as a,o as i,a2 as t}from"./chunks/framework.DoPyCSkJ.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"unit2/whatIsTypeScript.md","filePath":"unit2/whatIsTypeScript.md","lastUpdated":null}'),e={name:"unit2/whatIsTypeScript.md"},p=t(`<blockquote><p>平安蜀黍的前端教程 &gt; 第二单元 TypeScript 基础学习 &gt; 什么是 TypeScript</p></blockquote><h2 id="什么是-typescript" tabindex="-1">什么是 TypeScript <a class="header-anchor" href="#什么是-typescript" aria-label="Permalink to &quot;什么是 TypeScript&quot;">​</a></h2><p>TypeScript 是一种基于 ECMAScript 构建的强类型编程语言。使用 TypeScript 语言编辑的代码最终会被编译成 JavaScript 代码，可以在任何 JavaScript 引擎(例如浏览器或者 Node 服务器)中运行。</p><p>TypeScript 是用于解决我们在大型编码工作中所遇到的类型错误问题的，是 ECMAScript 程序的静态类型检查器，它在现有的 ECMAScript 的语法之上加入了一层叫做类型检查的机制，让我们可以在代码发布之前发现各种类型错误、语法错误等等低级问题。作为一个在 ECMAScript 代码运行之前运行的工具，我们也可以称之为静态编译工具。</p><h2 id="为什么要用-typescript" tabindex="-1">为什么要用 TypeScript <a class="header-anchor" href="#为什么要用-typescript" aria-label="Permalink to &quot;为什么要用 TypeScript&quot;">​</a></h2><h3 id="ecmascript-的缺陷" tabindex="-1">ECMAScript 的缺陷 <a class="header-anchor" href="#ecmascript-的缺陷" aria-label="Permalink to &quot;ECMAScript 的缺陷&quot;">​</a></h3><p>在 ECMAScript 中每个值都有一组不同的行为，我们可以通过运行不同的操作来观察它们，比如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在&quot;message&quot;上访问属性&quot;toLowerCase&quot;并调用它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用&quot;message&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>我们假设有 message 这样一个变量，而我们即将对 message 进行操作，但我们并不知道 message 具体是一个什么样的变量，它是一个值还是一个方法？它有 toLowerCase 这样一个属性吗？toLowerCase 是一个值还是一个方法？如果这两个方法可以访问那它们的返回值是什么呢？</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt; hello world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt; TypeError: message is not a function</span></span></code></pre></div><p>如上面的代码，在我们调用之前，在某个地方，有人定义了 message 是一个字符串&quot;Hello World&quot;，那么，当我们调用 message.toLowerCase()时无疑可以获得这个字符串的小写，但下面的直接将这个字符串作为一个方法来调用就明显出错了。</p><p>我们再来看一个例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>比如上面定义的这个函数，我们现在知道这个函数正确执行是有条件的，它必须能接受到一个参数，而且这个参数必须包含一个名为 flip 方法的属性，否则就会报错：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Cannot read properties of undefined (reading &#39;flip&#39;)</span></span></code></pre></div><p>很明显，我们在运行这些代码之前，不能确定这些调用究竟是返回一个正确的值还是导致程序崩溃，怎么解决呢？TypeScript 就是这样一个工具，它提供了一个静态类型检查系统。</p><h3 id="静态类型检查" tabindex="-1">静态类型检查 <a class="header-anchor" href="#静态类型检查" aria-label="Permalink to &quot;静态类型检查&quot;">​</a></h3><h3 id="非异常故障" tabindex="-1">非异常故障 <a class="header-anchor" href="#非异常故障" aria-label="Permalink to &quot;非异常故障&quot;">​</a></h3>`,18),n=[p];function l(h,r,c,k,o,d){return i(),a("div",null,n)}const y=s(e,[["render",l]]);export{E as __pageData,y as default};
