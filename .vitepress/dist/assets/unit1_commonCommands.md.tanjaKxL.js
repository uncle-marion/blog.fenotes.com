import{_ as t,c as a,o as s,a2 as d}from"./chunks/framework.DoPyCSkJ.js";const i="/blog.fenotes.com/assets/kill_port_01.CdyyrEZO.jpg",e="/blog.fenotes.com/assets/kill_port_02.1M-3wea4.jpg",l="/blog.fenotes.com/assets/kill_port_03.BFMU5ntO.jpg",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"unit1/commonCommands.md","filePath":"unit1/commonCommands.md","lastUpdated":null}'),r={name:"unit1/commonCommands.md"},n=d('<blockquote><p>平安蜀黍的前端教程 &gt; 第一单元 开发环境与工具封装 &gt; 终端常用命令</p></blockquote><p>配好各种开发环境后，我们往往需要在终端进行一系列命令操作来快捷实现对本地文件和远程服务器的操作，这些命令我们都需要记一记，这样，在需要的时候才能举重若轻，信手拈来。</p><h2 id="linux-终端常用命令" tabindex="-1">Linux 终端常用命令 <a class="header-anchor" href="#linux-终端常用命令" aria-label="Permalink to &quot;Linux 终端常用命令&quot;">​</a></h2><p>Linux 操作命令是我们未来操作远程服务器的命令，常用的不多，就几条，所以一定得记着</p><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>sudo</td><td>以超级用户的权限运行命令</td></tr><tr><td>ls</td><td>列出当前目录中的文件和子目录</td></tr><tr><td>pwd</td><td>显示当前工作目录的路径</td></tr><tr><td>hostname</td><td>显示计算机的主机名</td></tr><tr><td>cd</td><td>切换工作目录</td></tr><tr><td>mkdir</td><td>创建新的目录</td></tr><tr><td>rmdir</td><td>删除空目录(注意，只能删除空的目录，如果有内容，可能需要 -r)</td></tr><tr><td>rm</td><td>与 rmdir 一致</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>mv</td><td>移动或者重命名文件或目录</td></tr><tr><td>touch</td><td>创建一个空文件</td></tr><tr><td>cat</td><td>显示文件内容</td></tr><tr><td>grep</td><td>在文件中搜索指定文本</td></tr><tr><td>ps</td><td>显示当前运行的进程</td></tr><tr><td>kill</td><td>终止进程</td></tr></tbody></table><p><strong>注：</strong> OSX 的常用命令基本是一样的</p><h3 id="其它" tabindex="-1">其它: <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它:&quot;">​</a></h3><p>对于前端来说，最麻烦的问题就是在部署项目时发现原来的服务没有终止导致端口被占用</p><ul><li>第一步 查看占用端口的程序，以端口 8888 为例：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -anp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 8888表示你需要查询的端口号</span></span></code></pre></div><p>出现图中内容就表示这个端口已经被一个叫 echo_server 的进程占用了 <img src="'+i+'"></p><ul><li>第二步 查看占用这个端口的进程 ID</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lsof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :8888</span></span></code></pre></div><p>如图中框选的位置，4110 就是这个进程的 ID <img src="'+e+'"></p><ul><li>使用 kill 命令杀掉这个进程</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4110</span></span></code></pre></div><p>执行完成后可以看到结果 <img src="'+l+`"></p><h2 id="vim-的使用" tabindex="-1">VIM 的使用 <a class="header-anchor" href="#vim-的使用" aria-label="Permalink to &quot;VIM 的使用&quot;">​</a></h2><p>正常情况下，我们一般都会使用 VSCode 或 IDE 等编辑器来编写代码，但有时候可能需要远程操作文件，这时候就会用到 vi 或是 vim，vim 编辑器是不支持鼠标的，而且它的一些命令也与其它编辑器不一样：</p><h3 id="打开文件" tabindex="-1">打开文件 <a class="header-anchor" href="#打开文件" aria-label="Permalink to &quot;打开文件&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><h3 id="编辑文件" tabindex="-1">编辑文件 <a class="header-anchor" href="#编辑文件" aria-label="Permalink to &quot;编辑文件&quot;">​</a></h3><p>正常情况下，我们刚打开的文件是在命令模式下，这时候是没有办法编辑文件的，所以需要按 i 键进入插入模式，这时编辑器的左下角会显示 INSERT。编辑完成后必须按 ESC 退出插入模式。</p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><p>vim 必须在命令模式下才能对文件进行操作，比如保存、退出等等</p><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>:w</td><td>保存文件且不退出 vim</td></tr><tr><td>:w filename</td><td>将文件内容保存到 filename 对应的文件中，不退出 vim</td></tr><tr><td>:w!</td><td>强制保存且不退出 vim</td></tr><tr><td>:wq</td><td>保存文件且退出 vim</td></tr><tr><td>:wq!</td><td>强制保存文件且退出 vim</td></tr><tr><td>:q</td><td>放弃文件修改，退出 vim</td></tr><tr><td>:q!</td><td>放弃文件修改且强制退出 vim</td></tr><tr><td>:e!</td><td>放弃所有修改，文件内容恢复到上次保存状态，不退出 vim</td></tr></tbody></table><p><strong>注意</strong> 每个命令前的“:”必须手动输入</p><h2 id="windows-cmd-常用命令" tabindex="-1">Windows CMD 常用命令 <a class="header-anchor" href="#windows-cmd-常用命令" aria-label="Permalink to &quot;Windows CMD 常用命令&quot;">​</a></h2><h2 id="shell-常用命令" tabindex="-1">Shell 常用命令 <a class="header-anchor" href="#shell-常用命令" aria-label="Permalink to &quot;Shell 常用命令&quot;">​</a></h2><h2 id="npm-常用命令" tabindex="-1">Npm 常用命令 <a class="header-anchor" href="#npm-常用命令" aria-label="Permalink to &quot;Npm 常用命令&quot;">​</a></h2><h3 id="安装命令" tabindex="-1">安装命令 <a class="header-anchor" href="#安装命令" aria-label="Permalink to &quot;安装命令&quot;">​</a></h3><table><thead><tr><th>命令</th><th>操作</th><th>备注或示例</th></tr></thead><tbody><tr><td>npm i</td><td>读取 package.json 中的依赖项并安装</td><td>可简写成 npm install</td></tr><tr><td>npm i [位置]&lt;包名&gt;</td><td>安装指定依赖包的最新版本到指定位置</td><td>npm i -s gulp</td></tr><tr><td>npm i [位置]&lt;包名&gt;@&lt;版本号&gt;</td><td>安装指定依赖包的最新版本</td><td>npm i gulp@3.9.1</td></tr><tr><td>npm i [位置]&lt;包名&gt;@&lt;版本范围&gt;</td><td>安装指定依赖包的指定版本范围</td><td>npm install vue@&quot;&gt;=1.0.28 &lt; 2.0.0&quot;</td></tr><tr><td>npm uninstall [位置]&lt;包名&gt;</td><td>卸载指定位置的指定依赖包</td><td>npm uninstall gulp -s</td></tr><tr><td>npm init</td><td>初始化项目为 npm 管理项目</td><td>可以写成 npm init --yes 可避免在初始化时回答问题</td></tr></tbody></table><p>================================================================== Congratulations! Installed successfully! ========================面板账户登录信息==========================</p><p>外网面板地址: <a href="http://54.243.11.212:28889/a1d60775" target="_blank" rel="noreferrer">http://54.243.11.212:28889/a1d60775</a> 内网面板地址: http://:28889/a1d60775 username: mp2jt4xh password: 726f35c6</p><p>=========================打开面板前请看===========================</p><p>【云服务器】请在安全组放行 28889 端口 因默认启用自签证书 https 加密访问，浏览器将提示不安全 点击【高级】-【继续访问】或【接受风险并继续】访问 教程：<a href="https://www.bt.cn/bbs/thread-117246-1-1.html" target="_blank" rel="noreferrer">https://www.bt.cn/bbs/thread-117246-1-1.html</a></p><p>==================================================================</p><p>浏览器访问以下链接，添加宝塔客服 <a href="https://www.bt.cn/new/wechat_customer" target="_blank" rel="noreferrer">https://www.bt.cn/new/wechat_customer</a></p><p>==================================================================</p>`,39),h=[n];function p(o,c,m,k,u,g){return s(),a("div",null,h)}const v=t(r,[["render",p]]);export{_ as __pageData,v as default};
